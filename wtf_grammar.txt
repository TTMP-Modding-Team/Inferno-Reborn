wtf: BR* object EOF

object: ( stmt stmtTerminator )*

stmt: assignPropertyStmt
	| localStmt
	| fnStmt
	| applyStmt
	| ifStmt
	| forStmt
	| repeatStmt
	| returnStmt
	| debugStmt
	| expr

assignPropertyStmt
	: ( expr BR* "." BR* )? IDENTIFIER ":" BR* expr

localStmt
	: "local" BR* IDENTIFIER BR* ":" BR* expr

fnStmt
	: "fn" BR* IDENTIFIER BR* "(" param? BR* ")" BR* fnBody

applyStmt: ":" BR* expr

ifStmt
	: "if" BR* "(" BR* expr BR* ")" BR*
	( body | body? BR* "else" BR* body)

forStmt
	: "for" BR* "(" BR* IDENTIFIER BR* "in" BR* expr BR* ")" BR* body

repeatStmt
	: "repeat" BR* "(" BR* expr BR* ")" BR* body

returnStmt
	: "return" expr?

debugStmt: "debug" BR* expr

body
	: stmt
	| block

block: "{" BR* object "}"


expr: commaOperator

commaOperator: stringConjunction (BR* "," BR* stringConjunction)*

stringConjunction: ternary (BR* "|" BR* ternary)*

ternary: in (BR* "?" BR* ternary ":" ternary)?

in: or (BR* "in" BR* or)*

or: and (BR* "||" BR* and)*
and: eq (BR* "&&" BR* eq)*
eq: comp (BR* ("=="|"!=") BR* comp)*
comp: range (BR* (">"|"<"|">="|"<=") BR* range)*

range: random (BR* ".." BR* random)*
random: term (BR* "~" BR* term)*

term: factor (BR* ("+"|"-") BR* factor)*
factor: unary (BR* ("*"|"/") BR* unary)*

unary: (("!"|"-"|"debug") BR*)* call

call: primary ( BR* "." BR* IDENTIFIER | "(" BR* expr BR* ")" )*

primary
	: "(" BR* expr BR* ")"
	| IDENTIFIER (BR* block)?
	| lambda
	| block
	| literal

lambda: "fn" BR* ( "(" param BR* ")" | param ) BR* fnBody

literal
	: "true"
	| "false"
	| "this"
	| "null"
	| NUMBER
	| INT
	| NAMESPACE
	| STRING


stmtTerminator: ( BR | ";" )+

param: (BR* IDENTIFIER BR* ",")*
fnBody: block | ":" BR* stmt

# stupid lexical grammars, here you go

NUMBER: DIGIT+ "." DIGIT+
INT: DIGIT+
NAMESPACE
	: "<" ("a"..."z" | "0"..."9" | "_" | "-" | ".")+
	( ":" ("a"..."z" | "0"..."9" | "_" | "-" | "." | "/")+)? ">"
STRING
	: "\"" STRING_CONTENT "\""
	| "'" STRING_CONTENT "'"

STRING_CONTENT
	: "\\" ( "t" | "n" | "\\" | "\"" | "'" | "u" HEX{4} )
	| ^"\\\r\n\""

IDENTIFIER: ALPHABET (ALPHABET|DIGIT)*

DIGIT: "0"..."9"

ALPHABET: "a"..."z" | "A"..."Z" | "_"
HEX: DIGIT|"A"..."F"|"a"..."f"

BR: "\r"|"\n"