buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        maven { url = 'https://sizableshrimp.me/maven' }
        maven { url = "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath group: 'me.sizableshrimp.parchmenttest', name: 'ForgeGradle', version: '4.1.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
        classpath "com.github.jengelman.gradle.plugins:shadow:6.1.0"
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'com.github.johnrengelman.shadow'

version = "${mod_version}"
group = 'ttmp.infernoreborn'
archivesBaseName = 'InfernoReborn-1.16.5'

java.toolchain.languageVersion = JavaLanguageVersion.of(8) // Mojang ships Java 8 to end users, so your mod should target Java 8.
compileJava.options.encoding = 'UTF-8'

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'parchment', version: '2021.08.08-1.16.5'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
     accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                infernoreborn {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                infernoreborn {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'infernoreborn', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                infernoreborn {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

mixin {
    add sourceSets.main, "infernoreborn.refmap.json"
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.5-36.1.25'
    if(System.getProperty("idea.sync.active")!="true") {
        annotationProcessor 'org.spongepowered:mixin:0.8.2:processor'
    }
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    archiveClassifier.set('slim')
    manifest {
        attributes([
            "Specification-Title": "Inferno Reborn",
            "Specification-Vendor": "ttmp",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" : "ttmp",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

repositories {
    maven { url 'https://maven.blamejared.com' }
    maven {
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
    maven {
        url = "https://maven.theillusivec4.top/"
    }
    mavenCentral()
    maven {
        url = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
    }
}

dependencies {
    compileOnly fg.deobf("vazkii.patchouli:Patchouli:1.16.4-52-SNAPSHOT:api")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:1.16.4-52-SNAPSHOT")
    implementation fg.deobf("mezz.jei:jei-1.16.5:7.7.1.110")
    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:1.16.5-4.0.5.2")
    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:1.16.5-4.0.5.2:api")

    implementation ('io.github.amonglang:among:0.6.0-SNAPSHOT'){
        changing = true
    }

    implementation files('libs/construct-0.1.0.jar')
}

minecraft {
    runs {
        client {
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
        }
    }
}

shadowJar {
    archiveClassifier.set('')

    dependencies {
        exclude(dependency{
            it.moduleGroup != 'io.github.amonglang' // only shadow among and construct
        })
    }
}