buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        maven { url = 'https://maven.parchmentmc.org' }
        maven { url = 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath 'org.spongepowered:mixingradle:0.7.+'
        classpath 'com.github.jengelman.gradle.plugins:shadow:6.1.0'
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'com.github.johnrengelman.shadow'

version = "${mod_version}"
group = 'ttmp.infernoreborn'
archivesBaseName = 'InfernoReborn-1.16.5'

java.toolchain.languageVersion = JavaLanguageVersion.of(8) // Mojang ships Java 8 to end users, so your mod should target Java 8.
compileJava.options.encoding = 'UTF-8'

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

sourceSets {
    api {
        compileClasspath += configurations.getByName("minecraft")
    }

    main {
        resources {
            srcDirs 'src/generated/resources'
            exclude '.cache'
        }
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
    }

    datagen {
        java { srcDir "src/datagen/java" }

        compileClasspath += configurations.getByName("minecraft")
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

minecraft {
    mappings channel: 'parchment', version: '2022.03.06-1.16.5'
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                infernoreborn {
                    sources(sourceSets.main, sourceSets.api)
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                infernoreborn {
                    sources(sourceSets.main, sourceSets.api)
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'infernoreborn', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/'), '--existing', file('src/datagen/resources/')

            mods {
                infernoreborn {
                    sources(sourceSets.main, sourceSets.api, sourceSets.datagen)
                }
            }
        }
    }
}

mixin {
    add sourceSets.main, "infernoreborn.refmap.json"
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.5-36.2.39'
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

jar {
    archiveClassifier.set('slim')
    manifest {
        attributes([
                "Specification-Title"     : "Inferno Reborn",
                "Specification-Vendor"    : "ttmp",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "ttmp",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

repositories {
    maven { url 'https://maven.blamejared.com' }
    maven {
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
    maven {
        url = "https://maven.theillusivec4.top/"
    }
    mavenCentral()
    maven {
        url = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
    }
}

dependencies {
    compileOnly fg.deobf("vazkii.patchouli:Patchouli:1.16.4-53.3:api")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:1.16.4-53.3")
    implementation fg.deobf("mezz.jei:jei-1.16.5:7.7.1.153")
    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:1.16.5-4.0.8.2")
    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:1.16.5-4.0.8.2:api")

    apiCompileOnly fg.deobf("top.theillusivec4.curios:curios-forge:1.16.5-4.0.8.2:api")

    implementation('io.github.amonglang:among:0.6.0-SNAPSHOT'){
        changing = true
    }

    implementation files('libs/construct-0.1.0.jar')
}

minecraft {
    runs {
        client {
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
        }
    }
}

shadowJar {
    archiveClassifier.set('')

    dependencies {
        exclude(dependency{
            it.moduleGroup != 'io.github.amonglang' // only shadow among and construct
        })
    }
}